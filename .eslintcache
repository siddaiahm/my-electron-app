[{"C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\index.js":"1","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\reportWebVitals.js":"2","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\App.js":"3","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\shared\\constants.js":"4","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\components\\Meter.js":"5","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\components\\Footer.js":"6","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\components\\charge.js":"7","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\common\\index.js":"8","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\screens\\Home.js":"9","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\screens\\Settings.js":"10","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\screens\\Navigation.js":"11","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\components\\Turn.js":"12","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\components\\Map.js":"13"},{"size":484,"mtime":1612342656802,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":11699,"mtime":1612428470143,"results":"17","hashOfConfig":"15"},{"size":3383,"mtime":1612421113678,"results":"18","hashOfConfig":"15"},{"size":2301,"mtime":1612417978357,"results":"19","hashOfConfig":"15"},{"size":1685,"mtime":1612342533791,"results":"20","hashOfConfig":"15"},{"size":1209,"mtime":1612418027833,"results":"21","hashOfConfig":"15"},{"size":839,"mtime":1612179449875,"results":"22","hashOfConfig":"15"},{"size":310,"mtime":1612352865333,"results":"23","hashOfConfig":"15"},{"size":743,"mtime":1612427209340,"results":"24","hashOfConfig":"15"},{"size":345,"mtime":1612352858779,"results":"25","hashOfConfig":"15"},{"size":925,"mtime":1612352849004,"results":"26","hashOfConfig":"15"},{"size":125,"mtime":1612352518299,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"lclwm",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\index.js",[],["61","62"],"C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\reportWebVitals.js",[],"C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\App.js",["63","64","65","66","67","68","69"],"import \"./assets/style/index.css\";\r\nimport { channels, events } from \"../shared/constants\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { BulbFilled } from \"@ant-design/icons\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nimport Home from \"./screens/Home\";\r\nimport Navigation from \"./screens/Navigation\";\r\nimport Settings from \"./screens/Settings\";\r\nconst { ipcRenderer } = window;\r\n\r\nfunction App() {\r\n  const [isDark, setIsDark] = useState(false);\r\n  const [data, setData] = useState({});\r\n  const [isReady, setIsReady] = useState(false);\r\n  const [currentScreenIndex, setCurrentScreenIndex] = useState(2);\r\n  const [currentTabIndex, setCurrentTabIndex] = useState(0);\r\n  const [currentTab, setCurrentTab] = useState(0);\r\n  let screenIndexRef = useRef();\r\n  screenIndexRef.current = currentScreenIndex;\r\n  let tabIndexRef = useRef();\r\n  tabIndexRef.current = currentTabIndex;\r\n  let dataRef = useRef();\r\n  dataRef.current = data;\r\n  let currentTabRef = useRef();\r\n  currentTabRef.current = currentTab;\r\n\r\n  const handleToggleDarkMode = async () => {\r\n    let isDark = await ipcRenderer.invoke(channels.TOGGLE_DARK_MODE);\r\n    setIsDark(isDark);\r\n  };\r\n  let Test = ({ txt }) => <div>{txt}</div>;\r\n  const TABS = [\r\n    {\r\n      name: \"Settings\",\r\n      tabArray: [\r\n        { id: 0, name: \"Pair\", component: <Test txt=\"Pair component\" /> },\r\n        {\r\n          id: 1,\r\n          name: \"Day/Night\",\r\n          mode: 0,\r\n          component: <Test txt={(isDark ? \"Night\" : \"Day\") + \" Mode\"} />,\r\n          onOkKey: handleToggleDarkMode,\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"Record Ride\",\r\n          component: <Test txt=\"Record ride component\" />,\r\n        },\r\n        {\r\n          id: 3,\r\n          name: \"Sync To App\",\r\n          component: <Test txt=\"Sync to app component\" />,\r\n        },\r\n        {\r\n          id: 4,\r\n          name: \"Date And Time\",\r\n          component: <Test txt=\"Date and Time component\" />,\r\n        },\r\n        {\r\n          id: 5,\r\n          name: \"Ride Efficiency\",\r\n          component: <Test txt=\"Ride Efficiency component\" />,\r\n          onOkKey: () => {\r\n            setCurrentTabIndex(0);\r\n            setCurrentTab(1);\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: \"Your ride this week\",\r\n      tabArray: [\r\n        {\r\n          id: 0,\r\n          name: \"Average Power\",\r\n          component: <Test txt=\"Average Power component\" />,\r\n        },\r\n        {\r\n          id: 1,\r\n          name: \"Average Speed\",\r\n          component: <Test txt=\"Average Speed component\" />,\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"Distance\",\r\n          component: <Test txt=\"Distance component\" />,\r\n        },\r\n        {\r\n          id: 3,\r\n          name: \"Top Speed\",\r\n          component: <Test txt=\"Top Speed component\" />,\r\n        },\r\n        {\r\n          id: 4,\r\n          name: \"Ride Duration\",\r\n          component: <Test txt=\"Ride Duration component\" />,\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const SCREENS = [\r\n    {\r\n      name: \"HOME\",\r\n      screen: <Home data={data} />,\r\n    },\r\n    {\r\n      name: \"NAVI\",\r\n      screen: <Navigation data={data} />,\r\n    },\r\n    {\r\n      name: \"SETT\",\r\n      screen: (\r\n        <Settings\r\n          data={data}\r\n          tabInfo={TABS[currentTab]}\r\n          currentTabIndex={currentTabIndex}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const updateSoc = (newSoc) => {\r\n    if (newSoc >= 0 && newSoc <= 100) {\r\n      ipcRenderer.send(events.UPDATE_SOC, newSoc);\r\n    }\r\n  };\r\n\r\n  const updateSpeed = (newSpeed) => {\r\n    ipcRenderer.send(events.UPDATE_SPEED, newSpeed);\r\n  };\r\n\r\n  const updateTotalDistance = (newDistance) => {\r\n    ipcRenderer.send(events.UPDATE_ODO_METER, newDistance);\r\n  };\r\n\r\n  const handleInit = (data) => {\r\n    const keyDown = (e) => {\r\n      e = e || window.event;\r\n      handleKeyPress(e);\r\n      if (e.keyCode == \"38\") {\r\n        // up arrow\r\n        isAccelerating = true;\r\n      } else if (e.keyCode == \"40\") {\r\n        // down arrow\r\n        isBraking = true;\r\n      }\r\n    };\r\n    const keyUp = (e) => {\r\n      e = e || window.event;\r\n      if (e.keyCode == \"38\") {\r\n        // up arrow\r\n        isAccelerating = false;\r\n      } else if (e.keyCode == \"40\") {\r\n        // down arrow\r\n        isBraking = false;\r\n      }\r\n    };\r\n    document.onkeyup = keyUp;\r\n    document.onkeydown = keyDown;\r\n    function gearUp() {\r\n      if (gear < gears.length - 1) {\r\n        gear++;\r\n      }\r\n    }\r\n\r\n    function gearDown() {\r\n      if (gear > 1) {\r\n        gear--;\r\n      }\r\n    }\r\n    // VEHICLE CONFIG\r\n\r\n    let mass = 1000,\r\n      cx = 0.28,\r\n      gears = [0, 0.4, 0.7, 1.0, 1.3, 1.5, 1.68],\r\n      transmitionRatio = 0.17,\r\n      transmitionLoss = 0.15,\r\n      wheelDiameter = 0.5,\r\n      brakeTorqueMax = 300,\r\n      gear = 1,\r\n      overallRatio,\r\n      wheelRpm,\r\n      wheelTorque,\r\n      brakeTorque,\r\n      resistance,\r\n      acceleration;\r\n\r\n    // // MOTOR CONFIG\r\n\r\n    let rpmIdle = 0,\r\n      rpmMax = 8000,\r\n      rpmRedzone = 6500,\r\n      torqueMin = 20, // in m.kg\r\n      torqueMax = 45, // in m.kg\r\n      torque,\r\n      rpm = 0,\r\n      isAccelerating = false,\r\n      isBraking = false;\r\n\r\n    let lastTime = new Date().getTime(),\r\n      nowTime,\r\n      delta;\r\n\r\n    // BATTERY CONFIG\r\n\r\n    let distanceTraveled = 0;\r\n    // Helper functions\r\n\r\n    let torqueByRpm = function (rpm) {\r\n      let torque = torqueMin + (rpm / rpmMax) * (torqueMax - torqueMin);\r\n      return torque;\r\n    };\r\n\r\n    function kmh2ms(SPEED) {\r\n      // Km/h to m/s\r\n      return SPEED / 3.6;\r\n    }\r\n\r\n    (function loop() {\r\n      window.requestAnimationFrame(loop);\r\n\r\n      // Delta time\r\n      nowTime = new Date().getTime();\r\n      delta = (nowTime - lastTime) / 1000; // in seconds\r\n      lastTime = nowTime;\r\n\r\n      let oldSpeed = data.SPEED,\r\n        oldRpm = rpm;\r\n      // Torque\r\n\r\n      if (isAccelerating && rpm < rpmMax && data.SOC >= 1) {\r\n        // Gas!\r\n        torque = torqueByRpm(rpm);\r\n      } else {\r\n        torque = -((rpm * rpm) / 1000000);\r\n      }\r\n\r\n      if (isBraking) {\r\n        // Ooops...\r\n        brakeTorque = brakeTorqueMax;\r\n      } else {\r\n        brakeTorque = 0;\r\n      }\r\n\r\n      overallRatio = transmitionRatio * gears[gear];\r\n      wheelTorque = torque / overallRatio - brakeTorque;\r\n\r\n      acceleration = (20 * wheelTorque) / ((wheelDiameter * mass) / 2);\r\n      resistance = (0.5 * 1.2 * cx * kmh2ms(data.SPEED)) ^ 2;\r\n\r\n      // Speed\r\n\r\n      data.SPEED += (acceleration - resistance) * delta;\r\n      updateSpeed(data.SPEED);\r\n      if (data.SPEED < 0) {\r\n        data.SPEED = 0;\r\n        updateSpeed(data.SPEED);\r\n      }\r\n\r\n      wheelRpm = data.SPEED / (60 * ((Math.PI * wheelDiameter) / 1000));\r\n      rpm =\r\n        data.SPEED /\r\n        (60 *\r\n          transmitionRatio *\r\n          gears[gear] *\r\n          ((Math.PI * wheelDiameter) / 1000));\r\n\r\n      // Idle\r\n      if (rpm < rpmIdle) {\r\n        rpm = oldRpm;\r\n        updateSpeed(oldSpeed);\r\n      }\r\n      // Gear shifter\r\n      if (rpm > rpmRedzone) {\r\n        gearUp();\r\n      } else if (rpm <= rpmIdle + 10 || isBraking) {\r\n        gearDown();\r\n      }\r\n\r\n      //update SOC GUI\r\n      if (acceleration > 0) {\r\n        let reducedSoc = data.SOC - (acceleration * 0.001).toFixed(3);\r\n        if (reducedSoc >= 0) {\r\n          data.SOC = reducedSoc;\r\n          updateSoc(Math.round(data.SOC));\r\n        }\r\n      }\r\n\r\n      //set odometer\r\n      distanceTraveled = distanceTraveled + data.SPEED / 360000; //convert to km/s and add distance\r\n      updateTotalDistance(Math.floor(distanceTraveled));\r\n    })();\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    const LEFT_KEY = 37;\r\n    const RIGHT_KEY = 39;\r\n    const OK_KEY = 13;\r\n    switch (e.keyCode) {\r\n      case OK_KEY: {\r\n        ipcRenderer.send(events.DASHBOARD_CONTROL_BUTTON_OK);\r\n        break;\r\n      }\r\n      case LEFT_KEY: {\r\n        ipcRenderer.send(events.DASHBOARD_CONTROL_BUTTON_LEFT);\r\n        break;\r\n      }\r\n      case RIGHT_KEY: {\r\n        ipcRenderer.send(events.DASHBOARD_CONTROL_BUTTON_RIGHT);\r\n        break;\r\n      }\r\n      default:\r\n    }\r\n  };\r\n\r\n  const handleRightButton = () => {\r\n    let eventName;\r\n    let data = dataRef.current;\r\n    if (data.SWITCH_SCREEN) {\r\n      eventName = events.SWITCH_SCREEN;\r\n    } else {\r\n      eventName = events.SWITCH_TAB;\r\n    }\r\n    ipcRenderer.send(eventName, 1);\r\n  };\r\n\r\n  const handleLeftButton = () => {\r\n    let eventName;\r\n    let data = dataRef.current;\r\n    if (data.SWITCH_SCREEN) {\r\n      eventName = events.SWITCH_SCREEN;\r\n    } else {\r\n      eventName = events.SWITCH_TAB;\r\n    }\r\n    if (\r\n      SCREENS[currentScreenIndex].name === \"SETT\" &&\r\n      !data.SWITCH_SCREEN &&\r\n      tabIndexRef.current === 0\r\n    ) {\r\n      if (currentTabRef.current === 0) {\r\n        ipcRenderer.send(events.UPDATE_KILL_SWITCH_STATUS, 1);\r\n      } else {\r\n        setCurrentTab(currentTabRef.current - 1);\r\n      }\r\n    }\r\n    ipcRenderer.send(eventName, -1);\r\n  };\r\n\r\n  const handleOkButton = () => {\r\n    let data = dataRef.current;\r\n    if (SCREENS[screenIndexRef.current].name === \"SETT\" && data.SWITCH_SCREEN) {\r\n      ipcRenderer.send(events.UPDATE_KILL_SWITCH_STATUS, 0);\r\n    }\r\n    if (\r\n      TABS[currentTabRef.current].tabArray[tabIndexRef.current].onOkKey !==\r\n      undefined\r\n    ) {\r\n      TABS[currentTabRef.current].tabArray[tabIndexRef.current].onOkKey();\r\n    }\r\n  };\r\n\r\n  const handleSwitchScreen = (ev, index) => {\r\n    let switchScrenIndex = screenIndexRef.current + index;\r\n    if (switchScrenIndex >= 0 && switchScrenIndex < SCREENS.length) {\r\n      setCurrentScreenIndex(switchScrenIndex);\r\n    }\r\n  };\r\n\r\n  const handleSwitchTab = (ev, index) => {\r\n    let switchTabIndex = tabIndexRef.current + index;\r\n    if (\r\n      switchTabIndex >= 0 &&\r\n      switchTabIndex < TABS[currentTab].tabArray.length\r\n    ) {\r\n      setCurrentTabIndex(switchTabIndex);\r\n    }\r\n  };\r\n\r\n  const navigateScreen = (screenName) => {\r\n    let index = SCREENS.findIndex((screen) => screen.name === screenName);\r\n    setCurrentScreenIndex(index);\r\n  };\r\n\r\n  const handleCharging = () => {\r\n    ipcRenderer.send(events.TOGGLE_CHARGING_STATUS);\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    let data = await ipcRenderer.invoke(channels.GET_DATA);\r\n    setData(data);\r\n    setIsReady(true);\r\n    handleInit(data);\r\n  };\r\n  useEffect(() => {\r\n    setIsReady(false);\r\n    fetchData();\r\n    ipcRenderer.on(channels.DATA_UPDATED, (e, data) => {\r\n      setData(data);\r\n    });\r\n    ipcRenderer.on(channels.SWITCH_SCREEN, handleSwitchScreen);\r\n    ipcRenderer.on(channels.SWITCH_TAB, handleSwitchTab);\r\n    ipcRenderer.on(channels.DASHBOARD_CONTROL_BUTTON_LEFT, handleLeftButton);\r\n    ipcRenderer.on(channels.DASHBOARD_CONTROL_BUTTON_RIGHT, handleRightButton);\r\n    ipcRenderer.on(channels.DASHBOARD_CONTROL_BUTTON_OK, handleOkButton);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app-header\">\r\n        <button onClick={handleToggleDarkMode} className=\"mode-btn\">\r\n          <BulbFilled style={{ color: isDark ? \"white\" : \"black\" }} />\r\n        </button>\r\n        <button\r\n          onClick={handleCharging}\r\n          className=\"btn\"\r\n          style={{ left: 10, position: \"absolute\" }}\r\n        >\r\n          <i\r\n            className=\"fa fa-plug footer-icon\"\r\n            style={{ color: data.CHARGING_STATUS ? \"#3d7087\" : \"grey\" }}\r\n          />\r\n        </button>\r\n      </div>\r\n      <div className=\"app-body\">\r\n        {isReady ? SCREENS[currentScreenIndex].screen : \"Loading.....\"}\r\n      </div>\r\n      <Footer\r\n        currentScreen={SCREENS[currentScreenIndex].name}\r\n        navigateScreen={navigateScreen}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\shared\\constants.js",[],"C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\components\\Meter.js",[],"C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\components\\Footer.js",["70"],"import React, { useEffect, useState } from \"react\";\r\nimport logo from \"../assets/img/logo.png\";\r\nfunction Footer() {\r\n  const [date, setDate] = useState(new Date());\r\n  const [iconStyle, setIconStyle] = useState({});\r\n\r\n  const handleDate = () => {\r\n    (function loop() {\r\n      window.requestAnimationFrame(loop);\r\n      setDate(new Date());\r\n    })();\r\n  };\r\n  useEffect(() => {\r\n    handleDate();\r\n  }, []);\r\n\r\n  const handleNavigation = (icon) => {\r\n    setIconStyle({ [icon]: \"active\" });\r\n  };\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <div className=\"footer-left\">\r\n        {date.toLocaleDateString(navigator.language, {\r\n          weekday: \"short\",\r\n          month: \"short\",\r\n          day: \"numeric\",\r\n        })}\r\n      </div>\r\n      <div className=\"footer-center\">\r\n        <button className=\"btn\" onClick={() => handleNavigation(\"nav\")}>\r\n          <i className={\"fa fa-map footer-icon \" + (iconStyle[\"nav\"] || \"\")} />\r\n        </button>\r\n        <button className=\"app-logo\" onClick={() => handleNavigation({})}>\r\n          <img\r\n            src={logo}\r\n            style={{\r\n              width: 40,\r\n              height: 40,\r\n            }}\r\n          />\r\n        </button>\r\n        <button className=\"btn\" onClick={() => handleNavigation(\"setting\")}>\r\n          <i\r\n            className={\"fa fa-cog footer-icon \" + (iconStyle[\"setting\"] || \"\")}\r\n          />\r\n        </button>\r\n      </div>\r\n      <div className=\"footer-right\">\r\n        {date.toLocaleTimeString(navigator.language, {\r\n          hour: \"2-digit\",\r\n          minute: \"2-digit\",\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\components\\charge.js",["71","72"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport { ReactSVG } from \"react-svg\";\r\nimport { duration } from \"../common\";\r\nimport svg from \"./../assets/img/charge.svg\";\r\n\r\nfunction Charge({ SOC }) {\r\n  return (\r\n    <div style={{ width: 200, height: 300 }}>\r\n      <ReactSVG\r\n        src={svg}\r\n        renumerateIRIElements={false}\r\n        loading={() => <span>Loading...</span>}\r\n        afterInjection={(error, svg) => {\r\n          if (error) {\r\n            return;\r\n          }\r\n          let leftMask = document.getElementById(\"leftChargeMask\");\r\n          let rightMask = document.getElementById(\"rightChargeMask\");\r\n          let chargeText = document.getElementById(\"chargeText\");\r\n          let timeText = document.getElementById(\"timeText\");\r\n          if (leftMask && rightMask && chargeText && timeText) {\r\n            chargeText.textContent = SOC + \"%\";\r\n            let translateY = `translate(0,${250 * (100 - SOC) * 0.01})`;\r\n            leftMask.setAttribute(\"transform\", translateY);\r\n            rightMask.setAttribute(\"transform\", translateY);\r\n            timeText.textContent = duration(SOC);\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Charge;\r\n","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\common\\index.js",["73","74","75","76"],"export const duration = (t1 = 100) => {\r\n  let difference = (100 - t1) * 3000;\r\n\r\n  let weeks = Math.floor(difference / 1000 / 60 / 60 / 24 / 7);\r\n  let DAY = Math.floor(difference / 1000 / 60 / 60 / 24 - weeks * 7);\r\n  let HRS = Math.floor(difference / 1000 / 60 / 60 - weeks * 7 * 24 - DAY * 24);\r\n  let MIN = Math.floor(\r\n    difference / 1000 / 60 - weeks * 7 * 24 * 60 - DAY * 24 * 60 - HRS * 60\r\n  );\r\n  let SEC = Math.floor(\r\n    difference / 1000 -\r\n      weeks * 7 * 24 * 60 * 60 -\r\n      DAY * 24 * 60 * 60 -\r\n      HRS * 60 * 60 -\r\n      MIN * 60\r\n  );\r\n  let displayDate = \"HRS\";\r\n  [\"DAY\", \"HRS\", \"MIN\", \"SEC\"].some((q) => {\r\n    if (eval(q) > 0) {\r\n      displayDate = eval(q) + \" \" + q;\r\n\r\n      return true;\r\n    }\r\n  });\r\n  if (weeks > 0) {\r\n    displayDate = new Date(t1).toDateString();\r\n  }\r\n  return displayDate;\r\n};\r\n",["77","78"],"C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\screens\\Home.js",[],"C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\screens\\Settings.js",[],"C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\screens\\Navigation.js",[],"C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\components\\Turn.js",["79","80"],"import React, { useState } from \"react\";\r\nimport left from \"./../assets/img/left-turn.svg\";\r\nimport right from \"./../assets/img/right-turn.svg\";\r\nimport strait from \"./../assets/img/strait.svg\";\r\nimport u from \"./../assets/img/u-turn.svg\";\r\nfunction Turn() {\r\n  const [currentTurn, setCurrentTurn] = useState(\"right\");\r\n  const TURNS = {\r\n    left: left,\r\n    right: right,\r\n    strait: strait,\r\n    u: u,\r\n  };\r\n  return (\r\n    <div\r\n      className=\"turn-container\"\r\n      //   style={{\r\n      //     width: \"25%\",\r\n      //     display: \"flex\",\r\n      //     flexDirection: \"column\",\r\n      //     alignItems: \"center\",\r\n      //     justifyContent: \"center\",\r\n      //   }}\r\n    >\r\n      <img src={TURNS[currentTurn]} style={{ width: \"80%\" }} />\r\n      <div\r\n        style={{\r\n          textTransform: \"uppercase\",\r\n        }}\r\n      >\r\n        500M Turn right\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Turn;\r\n","C:\\Users\\Orxa-Team\\Desktop\\mantis-dashboard\\src\\react\\components\\Map.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":142,"column":21,"nodeType":"87","messageId":"88","endLine":142,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":145,"column":28,"nodeType":"87","messageId":"88","endLine":145,"endColumn":30},{"ruleId":"85","severity":1,"message":"86","line":152,"column":21,"nodeType":"87","messageId":"88","endLine":152,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":155,"column":28,"nodeType":"87","messageId":"88","endLine":155,"endColumn":30},{"ruleId":"89","severity":1,"message":"90","line":179,"column":7,"nodeType":"91","messageId":"92","endLine":179,"endColumn":22},{"ruleId":"89","severity":1,"message":"93","line":262,"column":7,"nodeType":"91","messageId":"92","endLine":262,"endColumn":15},{"ruleId":"94","severity":1,"message":"95","line":407,"column":6,"nodeType":"96","endLine":407,"endColumn":8,"suggestions":"97"},{"ruleId":"98","severity":1,"message":"99","line":36,"column":11,"nodeType":"100","endLine":42,"endColumn":13},{"ruleId":"89","severity":1,"message":"101","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":26},{"ruleId":"89","severity":1,"message":"102","line":1,"column":28,"nodeType":"91","messageId":"92","endLine":1,"endColumn":36},{"ruleId":"89","severity":1,"message":"103","line":10,"column":7,"nodeType":"91","messageId":"92","endLine":10,"endColumn":10},{"ruleId":"104","severity":1,"message":"105","line":18,"column":41,"nodeType":"106","messageId":"107","endLine":18,"endColumn":43},{"ruleId":"108","severity":1,"message":"109","line":19,"column":9,"nodeType":"110","messageId":"88","endLine":19,"endColumn":13},{"ruleId":"108","severity":1,"message":"109","line":20,"column":21,"nodeType":"110","messageId":"88","endLine":20,"endColumn":25},{"ruleId":"81","replacedBy":"111"},{"ruleId":"83","replacedBy":"112"},{"ruleId":"89","severity":1,"message":"113","line":7,"column":23,"nodeType":"91","messageId":"92","endLine":7,"endColumn":37},{"ruleId":"98","severity":1,"message":"99","line":25,"column":7,"nodeType":"100","endLine":25,"endColumn":64},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'transmitionLoss' is assigned a value but never used.","Identifier","unusedVar","'wheelRpm' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchData', 'handleLeftButton', 'handleOkButton', 'handleSwitchScreen', and 'handleSwitchTab'. Either include them or remove the dependency array.","ArrayExpression",["116"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.","'SEC' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-eval","eval can be harmful.","CallExpression",["114"],["115"],"'setCurrentTurn' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},"Update the dependencies array to be: [fetchData, handleLeftButton, handleOkButton, handleSwitchScreen, handleSwitchTab]",{"range":"119","text":"120"},[10838,10840],"[fetchData, handleLeftButton, handleOkButton, handleSwitchScreen, handleSwitchTab]"]
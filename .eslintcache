[{"/home/siddaiahm/Desktop/my-electron-app/src/index.js":"1","/home/siddaiahm/Desktop/my-electron-app/src/reportWebVitals.js":"2","/home/siddaiahm/Desktop/my-electron-app/src/react/App.js":"3","/home/siddaiahm/Desktop/my-electron-app/src/shared/constants.js":"4","/home/siddaiahm/Desktop/my-electron-app/src/react/components/Footer.js":"5","/home/siddaiahm/Desktop/my-electron-app/src/react/components/Meter.js":"6"},{"size":506,"mtime":1611138040812,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1611138040816,"results":"9","hashOfConfig":"8"},{"size":859,"mtime":1611462850811,"results":"10","hashOfConfig":"8"},{"size":90,"mtime":1611462850811,"results":"11","hashOfConfig":"8"},{"size":1708,"mtime":1611412752838,"results":"12","hashOfConfig":"8"},{"size":6830,"mtime":1611462290553,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"17g8na6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/home/siddaiahm/Desktop/my-electron-app/src/index.js",[],["29","30"],"/home/siddaiahm/Desktop/my-electron-app/src/reportWebVitals.js",[],"/home/siddaiahm/Desktop/my-electron-app/src/react/App.js",[],"/home/siddaiahm/Desktop/my-electron-app/src/shared/constants.js",[],"/home/siddaiahm/Desktop/my-electron-app/src/react/components/Footer.js",["31","32","33"],"import React, { useEffect, useState } from \"react\";\nimport { BranchesOutlined, SettingFilled } from \"@ant-design/icons\";\nimport logo from \"../assets/img/logo.png\";\nfunction Footer() {\n  const [date, setDate] = useState(new Date());\n  const [iconStyle, setIconStyle] = useState({});\n\n  const handleDate = () => {\n    (function loop() {\n      window.requestAnimationFrame(loop);\n      setDate(new Date());\n    })();\n  };\n  useEffect(() => {\n    handleDate();\n  }, []);\n\n  const handleNavigation = (icon) => {\n    setIconStyle({ [icon]: \"active\" });\n  };\n\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-left\">\n        {date.toLocaleDateString(navigator.language, {\n          weekday: \"short\",\n          month: \"short\",\n          day: \"numeric\",\n        })}\n      </div>\n      <div className=\"footer-center\">\n        <button className=\"btn\" onClick={() => handleNavigation(\"nav\")}>\n          <i className={\"fa fa-map footer-icon \" + (iconStyle[\"nav\"] || \"\")} />\n        </button>\n        <button className=\"app-logo\" onClick={() => handleNavigation({})}>\n          <img\n            src={logo}\n            style={{\n              width: 40,\n              height: 40,\n            }}\n          />\n        </button>\n        <button className=\"btn\" onClick={() => handleNavigation(\"setting\")}>\n          <i\n            className={\"fa fa-cog footer-icon \" + (iconStyle[\"setting\"] || \"\")}\n            // style={iconStyle[\"setting\"] || {}}\n          />\n        </button>\n      </div>\n      <div className=\"footer-right\">\n        {date.toLocaleTimeString(navigator.language, {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","/home/siddaiahm/Desktop/my-electron-app/src/react/components/Meter.js",["34","35","36","37","38","39","40"],"import React, { useEffect, useState } from \"react\";\n\nfunction Meter() {\n  const [meterValue, setMeterValue] = useState(0);\n  const [chargeValue, setChargeValue] = useState(0);\n  const [totalDistance, setTotalDistance] = useState(0);\n  const [tripDistance, setTripDistance] = useState(4);\n\n  let config = {\n    valueMin: 0,\n    valueMax: 220,\n    valueRed: 165,\n    angleMin: 0,\n    angleMax: 180,\n  };\n  const value2percent = function (value) {\n    let angle =\n      (value / (config.valueMax - config.valueMin)) *\n        (config.angleMax - config.angleMin) +\n      config.angleMin;\n    let percent = (angle / 180) * 100;\n    return percent;\n  };\n\n  let leftTransformerDegree = \"0deg\";\n  leftTransformerDegree = value2percent(meterValue) * 1.8 + \"deg\";\n  let rightTransformerDegree = \"180deg\";\n  rightTransformerDegree = -(17 * 1.8 + chargeValue * 1.25) + \"deg\";\n\n  const handleInit = () => {\n    document.onkeydown = keyDown;\n    document.onkeyup = keyUp;\n\n    function keyDown(e) {\n      e = e || window.event;\n      if (e.keyCode == \"38\") {\n        // up arrow\n        isAccelerating = true;\n      } else if (e.keyCode == \"40\") {\n        // down arrow\n        isBraking = true;\n      }\n    }\n    function keyUp(e) {\n      e = e || window.event;\n      if (e.keyCode == \"38\") {\n        // up arrow\n        isAccelerating = false;\n      } else if (e.keyCode == \"40\") {\n        // down arrow\n        isBraking = false;\n      }\n    }\n\n    function gearUp() {\n      if (gear < gears.length - 1) {\n        gear++;\n      }\n    }\n\n    function gearDown() {\n      if (gear > 1) {\n        gear--;\n      }\n    }\n    // VEHICLE CONFIG\n\n    let mass = 1000,\n      cx = 0.28,\n      gears = [0, 0.4, 0.7, 1.0, 1.3, 1.5, 1.68],\n      transmitionRatio = 0.17,\n      transmitionLoss = 0.15,\n      wheelDiameter = 0.5,\n      brakeTorqueMax = 300,\n      gear = 1,\n      speed = 0, // in km/h\n      overallRatio,\n      wheelRpm,\n      wheelTorque,\n      brakeTorque,\n      resistance,\n      acceleration;\n\n    // // MOTOR CONFIG\n\n    let rpmIdle = 0,\n      rpmMax = 8000,\n      rpmRedzone = 6500,\n      torqueMin = 20, // in m.kg\n      torqueMax = 45, // in m.kg\n      torque,\n      rpm = 0,\n      isAccelerating = false,\n      isBraking = false;\n\n    let lastTime = new Date().getTime(),\n      nowTime,\n      delta;\n\n    // BATTERY CONFIG\n\n    let soc = 90;\n    let distanceTraveled = 0;\n    // Helper functions\n\n    setChargeValue(soc);\n\n    let torqueByRpm = function (rpm) {\n      let torque = torqueMin + (rpm / rpmMax) * (torqueMax - torqueMin);\n      return torque;\n    };\n\n    function kmh2ms(speed) {\n      // Km/h to m/s\n      return speed / 3.6;\n    }\n\n    (function loop() {\n      window.requestAnimationFrame(loop);\n\n      // Delta time\n      nowTime = new Date().getTime();\n      delta = (nowTime - lastTime) / 1000; // in seconds\n      lastTime = nowTime;\n\n      let oldSpeed = speed,\n        oldRpm = rpm;\n      // Torque\n\n      if (isAccelerating && rpm < rpmMax && soc >= 1) {\n        // Gas!\n        torque = torqueByRpm(rpm);\n      } else {\n        torque = -((rpm * rpm) / 1000000);\n      }\n\n      if (isBraking) {\n        // Ooops...\n        brakeTorque = brakeTorqueMax;\n      } else {\n        brakeTorque = 0;\n      }\n\n      overallRatio = transmitionRatio * gears[gear];\n      wheelTorque = torque / overallRatio - brakeTorque;\n\n      acceleration = (20 * wheelTorque) / ((wheelDiameter * mass) / 2);\n      resistance = (0.5 * 1.2 * cx * kmh2ms(speed)) ^ 2;\n\n      // Speed\n\n      speed += (acceleration - resistance) * delta;\n\n      if (speed < 0) {\n        speed = 0;\n      }\n\n      wheelRpm = speed / (60 * ((Math.PI * wheelDiameter) / 1000));\n      rpm =\n        speed /\n        (60 *\n          transmitionRatio *\n          gears[gear] *\n          ((Math.PI * wheelDiameter) / 1000));\n\n      // Idle\n      if (rpm < rpmIdle) {\n        rpm = oldRpm;\n        speed = oldSpeed;\n      }\n      // Gear shifter\n      if (rpm > rpmRedzone) {\n        gearUp();\n      } else if (rpm <= rpmIdle + 10 || isBraking) {\n        gearDown();\n      }\n\n      //update charge GUI\n      if (acceleration > 0) {\n        let reducedSoc = soc - (acceleration * 0.0001).toFixed(3);\n        if (reducedSoc >= 0) {\n          soc = reducedSoc;\n          setChargeValue(Math.round(soc));\n        }\n      }\n\n      // Update GUI\n      setMeterValue(Math.round(speed));\n      //set odometer\n      distanceTraveled = distanceTraveled + speed / 360000; //convert to km/s and add distance\n      setTotalDistance(Math.floor(distanceTraveled));\n    })();\n  };\n\n  useEffect(() => {\n    handleInit();\n  }, []);\n\n  return (\n    <>\n      <div className=\"circle1\">\n        <div className=\"circle2\">\n          <div className=\"circle3\">\n            <div className=\"circle4\">\n              <div\n                className=\"circle5\"\n                style={{\n                  transform:\n                    \"translateX(-50%) rotate(\" +\n                    leftTransformerDegree +\n                    \") translateX(50%)\",\n                }}\n              ></div>\n              <div className=\"circle6\"></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"circle7\">\n          <div className=\"circle8\">\n            <div className=\"circle9\" />\n            <div\n              className=\"circle10\"\n              style={{\n                transform: `translateX(50%) rotate(${rightTransformerDegree}) translateX(-50%)`,\n              }}\n            ></div>\n          </div>\n          <div className=\"circle11\" />\n          <div className=\"circle12\">\n            <div className=\"circle13\">{chargeValue + \"%\"}</div>\n          </div>\n          <div className=\"circle14\">\n            <div className=\"circle15\">\n              <i class=\"fa fa-rotate-180 fa-battery-0 icon1\"></i>\n              <i class=\"fa fa-rotate-270 fa-bolt icon2\"></i>\n            </div>\n          </div>\n        </div>\n        <div className=\"circle16\" />\n        <div className=\"inner-circle\">\n          <div className=\"inner-circle1\">\n            <div className=\"inner-circle2\">\n              <div className=\"inner-circle3\">\n                <div className=\"inner-circle4\">\n                  <i className=\"inner-text1\">{meterValue}</i>\n                  <i className=\"inner-text2\">KM/H</i>\n                  <div className=\"inner-center-line\" />\n                  <i className=\"inner-text3\">170</i>\n                  <i className=\"inner-text2\">KM LEFT</i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"meter-info\">\n        <div className=\"odo-meter\">\n          <i>Odometer</i>\n          <i>{totalDistance} km</i>\n        </div>\n        <div className=\"trip-meter\">\n          <i>Tripmeter</i>\n          <i>{tripDistance} km</i>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Meter;\n",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":2,"column":10,"nodeType":"47","messageId":"48","endLine":2,"endColumn":26},{"ruleId":"45","severity":1,"message":"49","line":2,"column":28,"nodeType":"47","messageId":"48","endLine":2,"endColumn":41},{"ruleId":"50","severity":1,"message":"51","line":36,"column":11,"nodeType":"52","endLine":42,"endColumn":13},{"ruleId":"45","severity":1,"message":"53","line":7,"column":24,"nodeType":"47","messageId":"48","endLine":7,"endColumn":39},{"ruleId":"54","severity":1,"message":"55","line":36,"column":21,"nodeType":"56","messageId":"57","endLine":36,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":39,"column":28,"nodeType":"56","messageId":"57","endLine":39,"endColumn":30},{"ruleId":"54","severity":1,"message":"55","line":46,"column":21,"nodeType":"56","messageId":"57","endLine":46,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":49,"column":28,"nodeType":"56","messageId":"57","endLine":49,"endColumn":30},{"ruleId":"45","severity":1,"message":"58","line":72,"column":7,"nodeType":"47","messageId":"48","endLine":72,"endColumn":22},{"ruleId":"45","severity":1,"message":"59","line":158,"column":7,"nodeType":"47","messageId":"48","endLine":158,"endColumn":15},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'BranchesOutlined' is defined but never used.","Identifier","unusedVar","'SettingFilled' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setTripDistance' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'transmitionLoss' is assigned a value but never used.","'wheelRpm' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]